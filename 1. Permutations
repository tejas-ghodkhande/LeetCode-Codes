1)Approach 1 

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>ds;
        int freq[nums.size()];
        for(int i=0;i<nums.size();i++)
            freq[i]=0;
        recurPermutations(ds,ans,freq,nums);
        return ans;
        
    }
    void recurPermutations(vector<int> &ds,vector<vector<int>> &ans,int freq[],vector<int>nums)
    {
        if(ds.size()==nums.size())
        {
            ans.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++)
        {
            if(freq[i]==0)
            {
                ds.push_back(nums[i]);
                freq[i]=1;
                recurPermutations(ds,ans,freq,nums);
                freq[i]=0;
                ds.pop_back();
                   
            }
        }
    }
};


2. Approach 2:

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        
        vector<vector<int>>ans;
        recurPermute(0,nums,ans);
        return ans;
        
    }
    void recurPermute(int ind,vector<int> &nums,vector<vector<int>> &ans)
    {
        if(ind==nums.size())
        {
            ans.push_back(nums);
            return;
        }
        for(int i=ind;i<nums.size();i++)
        {
            swap(nums[i],nums[ind]);
            recurPermute(ind+1,nums,ans);
            swap(nums[ind],nums[i]);
            
        }
    }
};
